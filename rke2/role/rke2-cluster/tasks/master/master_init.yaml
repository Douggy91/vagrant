## 02_download_resources
- name: 2-0-1. Copy Kernel Params
  file:
    src: sysctl.conf
    dest: /etc/sysctl.conf
  tags:
    - masters-init
    - system-params

- name: 2-0-2. apply Kernel Params
  shell: |
    sysctl -p /etc/sysctl.conf
  tags:
    - masters-init
    - system-params

- name: 1-1-1. Make necessary directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /var/log/vas
    - /root/rke2-artifacts
    - "{{ LOCAL_PATH.PACKAGES }}"
    - /root/ansible
    - "{{ LOCAL_PATH.BASE }}/yaml"
  tags:
    - masters_init
    - resource-copy

- name: 1-1-2. Copy Package resources
  copy:
    src: "{{ LOCAL_PATH.PACKAGES }}/{{ item }}"
    dest: "{{ LOCAL_PATH.PACKAGES }}"
  with_items:
    - "rke2-required" 
    - "rke2-airgap" 
    - "k9s" 
    - "rancher" 
    - "helm" 
    - "default" 
    - "longhorn"
  tags:
    - masters_init
    - resource-copy

- name: 1-1-3. Copy yaml 
  template:
    src: "init_yaml/{{ item }}"
    dest: "{{ LOCAL_PATH.BASE }}/yaml/{{ item }}"
  with_items:
    - "cert-manager.yaml"
    - "longhorn.yaml"
    - "cattle-system-ns.yaml"
  tags:
    - masters_init
    - resource-copy

- name: 1-1-3. Copy yaml 
  copy:
    src: "{{ LOCAL_PATH.BASE }}/yaml/{{ item }}"
    dest: "{{ LOCAL_PATH.BASE }}/yaml/{{ item }}"
  with_items:
    - "cert-manager.yaml"
    - "longhorn.yaml"
    - "cattle-system-ns.yaml"
  tags:
    - masters_init
    - resource-copy

- name: 1-1-4. Move RKE2 artifacts
  copy:
    src: "{{ LOCAL_PATH.PACKAGES }}/rke2-airgap/"
    dest: /root/rke2-artifacts
    remote_src: yes
  tags:
    - masters_init
    - resource-copy
- name: 1-1-5. Extract Helm, k9s, telnet
  unarchive:
    src: "{{ LOCAL_PATH.PACKAGES }}/{{ item.DIR }}/{{ item.FILE_NAME }}"
    dest: "{{ LOCAL_PATH.PACKAGES }}/{{ item.DIR }}"
    remote_src: yes
  with_items:
    - { DIR: 'helm', FILE_NAME: 'helm-v3.10.1-linux-amd64.tar.gz' }
    - { DIR: 'k9s', FILE_NAME: 'k9s_Linux_amd64.tar.gz' }
    - { DIR: 'default', FILE_NAME: 'inetutils-2.4.tar.gz' }
  tags:
    - masters_init
    - resource-copy

## 03_install_required_packages
- name: 1-2-1. Find RKE2 required RPM files
  find:
    paths: "{{ LOCAL_PATH.PACKAGES }}/rke2-required"
    patterns: "*.rpm"
  register: rpm_files
  tags:
    - masters_init
    - resource-install

- name: 1-2-2. Install the packages
  dnf:
    name: "{{ item }}"
    state: present
    disable_gpg_check: yes
  with_items:
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/libnetfilter_conntrack-1.0.6-5.el8.x86_64.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/iptables-1.8.4-24.el8.x86_64.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/policycoreutils-python-utils-2.9-24.el8.noarch.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/libnftnl-1.1.5-5.el8.x86_64.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/container-selinux-2.205.0-2.module-el8.8.0-1265-fa25dd7a.noarch.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/rke2-selinux-0.15-1.el8.noarch.rpm, {{ LOCAL_PATH.PACKAGES }}/rke2-required/rke2-common-1.18.20~rke2r1-0.el8.x86_64.rpm"
  tags:
    - masters_init
    - resource-install

## 04_configure_system
- name: 1-3-1. swap off
  shell: swapoff -a
  tags:
    - masters_init
    - network-config
- name: 1-3-2. swap off of fstab file
  shell: sed -i '/swap/s/^/#/' /etc/fstab
  tags:
    - masters_init
    - network-config

- name: 1-3-3. Check swap memory size
  shell: free | awk 'NR == 3 { print $2 }'
  register: check_swap_mem
  tags:
    - masters_init
    - network-config

- name: 1-3-4. Check swapoff
  debug:
    msg: "Complete swapoff!"
  when: check_swap_mem.stdout == '0'
  tags:
    - masters_init
    - network-config

- name: 1-3-5. flush iptables
  iptables:
    flush: yes
  tags:
    - masters_init
    - network-config

## 05_configure_selinux
- name: 1-3-6. Disable SELinux
  ansible.posix.selinux:
    policy: targeted
    state: disabled
  tags:
    - masters_init
    - network-config

- name: 1-3-7. Update SELinux configuration file
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: SELINUX=disabled
    backup: yes # 내용이 다르면 백업(파일이름.날짜 형식) / 같으면 백업 X
  tags:
    - masters_init
    - network-config

- name: 1-3-8. SELinux state
  shell: getenforce
  register: "check_selinux"
  tags:
    - masters_init
    - network-config

- name: 1-3-9. Print SELinux status
  debug:
    msg: "{{ check_selinux.stdout }}"
  tags:
    - masters_init
    - network-config

## 06_configure_network_for_rke2_airgap
- name: 1-3-10. Check NetworkManager directory exists
  file:
    path: "{{ NET_CONF_DIR }}"
    state: directory
  tags:
    - masters_init
    - network-config

- name: 1-3-11. Add the content to the file
  copy:
    dest: "{{ NET_CONF_FILE }}"
    content: |
      ##
      [keyfile]
      unmanaged-devices=interface-name:cali*;interface-name:flannel*
      ##
  tags:
    - masters_init
    - network-config      

- name: 1-3-12. Reload NetworkManager
  systemd_service:
    name: NetworkManager
    state: restarted
    enabled: true
  register: "check_networkmanager_status"
  tags:
    - masters_init
    - network-config    

- name: 1-3-13. Print NetworkManager service status
  debug:
    msg: "{{ check_networkmanager_status }}"
  tags:
    - masters_init
    - network-config   

## 07_install_configure_rke2
- name: 1-4-1. Uninstall RKE2
  shell: rke2-uninstall.sh
  tags:
    - masters_init
    - rke2-init

- name: 1-4-2. Install and set RKE2
  shell: INSTALL_RKE2_TYPE=server INSTALL_RKE2_ARTIFACT_PATH=/root/rke2-artifacts INSTALL_RKE2_SYSTEM_DEFAULT_REGISTRY="{{ REGISTRY_URL }}{{ ':' }}5000" sh /root/rke2-artifacts/install.sh
  tags:
    - masters_init
    - rke2-init

## 08_configure_registry
- name: 1-4-3. Create directories(Docker, RKE2, containerd)
  file:
    path: "{{ item.DIR }}"
    state: directory
  with_items: "{{ REGISTRY_CONFIG }}"
  tags:
    - masters_init
    - rke2-init

- name: 1-4-4. Set private repo for (Docker, RKE2, containerd)
  copy:
    dest: "{{ item.DIR }}/{{ item.FILE }}"
    content: "{{ item.CONTENT }}"
  with_items: "{{ REGISTRY_CONFIG }}"
  tags:
    - masters_init
    - rke2-init

## 09_configure_server
- name: 1-4-5. Make necessary directories
  file:
    path: /etc/rancher/rke2
    state: directory
  tags:
    - masters_init
    - rke2-init

- name: 1-4-6. Add the content to the file
  copy:
    dest: /etc/rancher/rke2/config.yaml
    content: |
      #TODO: 클러스터 토큰값 고정 -> K10 이후 해시값은 고정이 불가능한 것 같음(https://github.com/rancher/rke2/issues/3214)
      node-name: {{ inventory_hostname }}
  tags:
    - masters_init
    - rke2-init

- name: 1-4-7. Enable and start the rke2-server service
  systemd_service:
    name: rke2-server
    state: started
    enabled: true
  register: "check_rke2server_state"
  tags:
    - masters_init
    - rke2-init

- name: 1-4-8. Print rke2-server service status
  debug:
    msg: "{{ check_rke2server_state }}"
  tags:
    - masters_init
    - rke2-init

## 10_configure_kube_tools
- name: 1-5-1. Make log directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /var/log/vas
    - /root/.kube
  tags:
    - masters_init
    - config-kubeconfig

- name: 1-5-2. Set Up Kubeconfig
  copy:
    src: /etc/rancher/rke2/rke2.yaml
    dest: /root/.kube/config
    mode: 0600
    remote_src: yes
  tags:
    - masters_init
    - config-kubeconfig

- name: 1-6-1. Display the cluster token from the file and emphasize it
  shell: cat /var/lib/rancher/rke2/server/node-token
  register: node_token
  tags:
    - masters_init
    - prepare-connect

- name: 1-6-2. Print node token
  debug:
    msg: "Cluster token{{ ':' }} {{ node_token.stdout }}"
  tags:
    - masters_init
    - prepare-connect

- name: 1-6-3. Copy node token from the master to the controller
  fetch:
    src: "/var/lib/rancher/rke2/server/token"
    dest: "{{ LOCAL_PATH.BASE }}/node-token/token"
    flat: yes
  tags:
    - masters_init
    - prepare-connect

## 11_install_configure tools
- name: 1-7-1. Copy configuration tool files
  copy:
    src: "{{ item.SRC }}"
    dest: "/usr/local/bin/{{ item.DEST }}"
    mode: +x
    remote_src: yes
  with_items: "{{ CONFIG_TOOL_FILES_M }}"
  tags:
    - masters_init
    - config-kubetools

- name: 1-7-2. Telnet configuration and install
  shell: "{{ item }}"
  args:
    chdir: "{{ LOCAL_PATH.PACKAGES }}/default/inetutils-2.4/"
  with_items:
    - "./configure --prefix=/usr/local"
    - make
    - sudo make install
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-7-3. Install longhorn deps
  dnf:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ LOCAL_PATH.PACKAGES }}/longhorn/isns-utils-libs-0.99-1.el8.x86_64.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/longhorn/iscsi-initiator-utils-6.2.1.4-8.git095f59c.el8_8.x86_64.rpm, {{ LOCAL_PATH.PACKAGES }}/longhorn/iscsi-initiator-utils-iscsiuio-6.2.1.4-8.git095f59c.el8_8.x86_64.rpm"
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-7-4. Enable iscsid
  systemd_service:
    name: iscsid
    state: started
    enabled: true
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-7-5. configuration environment
  lineinfile:
    path: /root/.bashrc
    line: "{{ item }}"
  with_items:
    - "export PATH=$PATH:/var/lib/rancher/rke2/bin:/usr/local/bin"
    - "export CRI_CONFIG_FILE=/var/lib/rancher/rke2/agent/etc/crictl.yaml"
    - "alias k=kubectl"
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-7-6. Source bashrc
  shell: source /root/.bashrc
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-7-7. Install cert manager
  shell: "/var/lib/rancher/rke2/bin/kubectl apply -f {{ LOCAL_PATH.BASE }}/yaml/cert-manager.yaml"
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-7-8. Pause for 1 minute to run cert-manager
  pause:
    minutes: 1
    prompt: "Please wait 1 min for run cert-manager service"
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-7-9. Install rancher
  shell: /var/lib/rancher/rke2/bin/kubectl apply -f {{ LOCAL_PATH.BASE }}/yaml/cattle-system-ns.yaml
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-7-10. Install longhorn
  shell: "/var/lib/rancher/rke2/bin/kubectl apply -f {{ LOCAL_PATH.BASE }}/yaml/longhorn.yaml"
  tags:
    - masters_init
    - config-kubetools
- name: 1-7-11. set hostname
  hostname: 
    name: "{{ inventory_hostname }}"
  tags:
    - masters_init
    - config-kubetools