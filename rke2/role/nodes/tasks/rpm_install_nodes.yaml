- name: 1-1-1. Make necessary directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /var/log/vas
    - /root/rke2-artifacts
    - "{{ LOCAL_PATH.PACKAGES }}"
    - /root/ansible
    - "{{ LOCAL_PATH.BASE }}/yaml"
  tags:
    - masters_init
    - resource-copy

- name: 1-1-2. Copy Package resources
  copy:
    src: "{{ LOCAL_PATH.PACKAGES }}/{{ item }}"
    dest: "{{ LOCAL_PATH.PACKAGES }}"
  with_items:
    - "rke2-required" 
    - "rke2-airgap" 
    - "k9s" 
    - "rancher" 
    - "helm" 
    - "default" 
    - "longhorn"
  tags:
    - masters_init
    - resource-copy

- name: 1-1-3. Copy yaml 
  template:
    src: "init_yaml/{{ item }}"
    dest: "{{ LOCAL_PATH.BASE }}/yaml/{{ item }}"
  with_items:
    - "cert-manager.yaml"
    - "longhorn.yaml"
    - "cattle-system-ns.yaml"
  tags:
    - masters_init
    - resource-copy

- name: 1-1-3. Copy yaml 
  copy:
    src: "{{ LOCAL_PATH.BASE }}/yaml/{{ item }}"
    dest: "{{ LOCAL_PATH.BASE }}/yaml/{{ item }}"
  with_items:
    - "cert-manager.yaml"
    - "longhorn.yaml"
    - "cattle-system-ns.yaml"
  tags:
    - masters_init
    - resource-copy

- name: 1-1-4. Move RKE2 artifacts
  copy:
    src: "{{ LOCAL_PATH.PACKAGES }}/rke2-airgap/"
    dest: /root/rke2-artifacts
    remote_src: yes
  tags:
    - masters_init
    - resource-copy
- name: 1-1-5. Extract Helm, k9s, telnet
  unarchive:
    src: "{{ LOCAL_PATH.PACKAGES }}/{{ item.DIR }}/{{ item.FILE_NAME }}"
    dest: "{{ LOCAL_PATH.PACKAGES }}/{{ item.DIR }}"
    remote_src: yes
  with_items:
    - { DIR: 'helm', FILE_NAME: 'helm-v3.10.1-linux-amd64.tar.gz' }
    - { DIR: 'k9s', FILE_NAME: 'k9s_Linux_amd64.tar.gz' }
    - { DIR: 'default', FILE_NAME: 'inetutils-2.4.tar.gz' }
  tags:
    - masters_init
    - resource-copy

## 03_install_required_packages
- name: 1-2-1. Find RKE2 required RPM files
  find:
    paths: "{{ LOCAL_PATH.PACKAGES }}/rke2-required"
    patterns: "*.rpm"
  register: rpm_files
  tags:
    - masters_init
    - resource-install

- name: 1-2-2. Install the packages
  dnf:
    name: "{{ item }}"
    state: present
    disable_gpg_check: yes
  with_items:
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/libnetfilter_conntrack-1.0.6-5.el8.x86_64.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/iptables-1.8.4-24.el8.x86_64.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/policycoreutils-python-utils-2.9-24.el8.noarch.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/libnftnl-1.1.5-5.el8.x86_64.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/container-selinux-2.205.0-2.module-el8.8.0-1265-fa25dd7a.noarch.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/rke2-required/rke2-selinux-0.15-1.el8.noarch.rpm, {{ LOCAL_PATH.PACKAGES }}/rke2-required/rke2-common-1.18.20~rke2r1-0.el8.x86_64.rpm"
  tags:
    - masters_init
    - resource-install

## 04_configure_system
- name: 1-3-1. swap off
  shell: swapoff -a
  tags:
    - masters_init
    - network-config
- name: 1-3-2. swap off of fstab file
  shell: sed -i '/swap/s/^/#/' /etc/fstab
  tags:
    - masters_init
    - network-config

- name: 1-3-3. Check swap memory size
  shell: free | awk 'NR == 3 { print $2 }'
  register: check_swap_mem
  tags:
    - masters_init
    - network-config

- name: 1-3-4. Check swapoff
  debug:
    msg: "Complete swapoff!"
  when: check_swap_mem.stdout == '0'
  tags:
    - masters_init
    - network-config

- name: 1-3-5. flush iptables
  iptables:
    flush: yes
  tags:
    - masters_init
    - network-config

## 05_configure_selinux
- name: 1-3-6. Disable SELinux
  ansible.posix.selinux:
    policy: targeted
    state: disabled
  tags:
    - masters_init
    - network-config

- name: 1-3-7. Update SELinux configuration file
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: SELINUX=disabled
    backup: yes # 내용이 다르면 백업(파일이름.날짜 형식) / 같으면 백업 X
  tags:
    - masters_init
    - network-config

- name: 1-3-8. SELinux state
  shell: getenforce
  register: "check_selinux"
  tags:
    - masters_init
    - network-config

- name: 1-3-9. Print SELinux status
  debug:
    msg: "{{ check_selinux.stdout }}"
  tags:
    - masters_init
    - network-config

## 06_configure_network_for_rke2_airgap
- name: 1-3-10. Check NetworkManager directory exists
  file:
    path: "{{ NET_CONF_DIR }}"
    state: directory
  tags:
    - masters_init
    - network-config

- name: 1-3-11. Add the content to the file
  copy:
    dest: "{{ NET_CONF_FILE }}"
    content: |
      ##
      [keyfile]
      unmanaged-devices=interface-name:cali*;interface-name:flannel*
      ##
  tags:
    - masters_init
    - network-config      

- name: 1-3-12. Reload NetworkManager
  systemd_service:
    name: NetworkManager
    state: restarted
    enabled: true
  register: "check_networkmanager_status"
  tags:
    - masters_init
    - network-config    

- name: 1-3-13. Print NetworkManager service status
  debug:
    msg: "{{ check_networkmanager_status }}"
  tags:
    - masters_init
    - network-config   

- name: 1-4-1. Telnet configuration and install
  shell: "{{ item }}"
  args:
    chdir: "{{ LOCAL_PATH.PACKAGES }}/default/inetutils-2.4/"
  with_items:
    - "./configure --prefix=/usr/local"
    - make
    - config-kubetools
  tags:
    - masters_init
    - config-kubetools
  
- name: 1-4-2. Install longhorn deps
  dnf:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ LOCAL_PATH.PACKAGES }}/longhorn/isns-utils-libs-0.99-1.el8.x86_64.rpm"
    - "{{ LOCAL_PATH.PACKAGES }}/longhorn/iscsi-initiator-utils-6.2.1.4-8.git095f59c.el8_8.x86_64.rpm, {{ LOCAL_PATH.PACKAGES }}/longhorn/iscsi-initiator-utils-iscsiuio-6.2.1.4-8.git095f59c.el8_8.x86_64.rpm"
  tags:
    - masters_init
    - config-kubetools

# DB 배포에 필요한 .sql .bak 파일을 마스터 노드로 전달합니다.
- name: 1-4-3. Download MariaDB client, Dump, DB Schema file
  copy:
    src: "{{ item.src}}" 
    dest: "{{ item.dest }}"
  with_items:
    - { src: "{{ LOCAL_PATH.BASE }}/db/mariadb_client", dest: /root/ }
    - { src: /root/ansible/git-core-2.39.3-1.el8_8.x86_64.rpm, dest: /root/git-core-2.39.3-1.el8_8.x86_64.rpm }
  tags:
    - masters_init
    - config-kubetools

  # Pod 접근없이 mariaDB를 핸들링 할 수 있도록 Client 명령어들을 설치합니다.
- name: 1-4-4. Install MariaDB client in private
  dnf:
    name: "{{ item }}"
    state: present
    disable_gpg_check: yes
  with_items:
    - /root/mariadb_client/libpmem-1.6.1-1.el8.x86_64.rpm
    - /root/mariadb_client/perl-DBI-1.641-4.module+el8.6.0+891+677074cb.x86_64.rpm
    - "/root/mariadb_client/MariaDB-client-10.6.10-1.el8.x86_64.rpm, /root/mariadb_client/MariaDB-common-10.6.10-1.el8.x86_64.rpm, /root/mariadb_client/MariaDB-shared-10.6.10-1.el8.x86_64.rpm"
    - "/root/git-core-2.39.3-1.el8_8.x86_64.rpm"
  tags:
    - masters_init
    - config-kubetools